{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","Axios","get","modifiedData","console","log","fetchDailyChartData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyChartData","setDailyChartData","useEffect","barChart","labels","datasets","lable","backgroundColor","options","legend","display","title","text","lineChart","label","borderColor","fill","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","default","onChange","e","target","i","key","App","state","fetchedData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f01264d8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__njCB9\",\"card\":\"Cards_card__t9usB\",\"infected\":\"Cards_infected__2CQD9\",\"recovered\":\"Cards_recovered__2qCB1\",\"deaths\":\"Cards_deaths__2gdA9\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'; \r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css'\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if(!confirmed) {\r\n        return 'loading...'\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2} separator=\",\"></CountUp>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={2} separator=\",\"></CountUp>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Recovered cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={2} separator=\",\"></CountUp>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Death cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import Axios from 'axios';\r\n\r\nconst url = \"https://covid19.mathdro.id/api\"; //base url for to the api\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl;\r\n\r\n    if (country && country !== \"global\") {\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    } else {\r\n        changeableUrl = url;\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await Axios.get(changeableUrl);\r\n\r\n        const modifiedData = {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate,\r\n        }\r\n        return modifiedData;\r\n    } catch(error) {\r\n        console.log(error);\r\n    };\r\n}\r\n\r\nexport const fetchDailyChartData = async () => {\r\n    try {\r\n        const { data } = await Axios.get(`${url}/daily`);\r\n\r\n        return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries } } = await Axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyChartData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data, country }) => {\r\n    const [dailyChartData, setDailyChartData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setDailyChartData(await fetchDailyChartData()); \r\n        }\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const barChart = (\r\n        data.confirmed ?\r\n        (<Bar data={{\r\n            labels:[\"Infected\", \"Recovered\", \"Deaths\"],\r\n            datasets: [{\r\n                lable: \"People\",\r\n                backgroundColor: [\r\n                    \"rgba(0, 0 ,255, 0.5)\",\r\n                    \"rgba(0, 255 ,0, 0.5)\",\r\n                    \"rgba(255, 0 ,0, 0.5)\"\r\n                ],\r\n                data:[data.confirmed.value, data.recovered.value, data.deaths.value],\r\n            }]\r\n        }} options={{\r\n            legend: { display: false },\r\n            title: { display: true, text: `Current State in ${country}`}\r\n        }}></Bar>) : null\r\n    );\r\n\r\n    const lineChart = (\r\n        dailyChartData[0] ? (\r\n            <Line\r\n              data={{\r\n                labels: dailyChartData.map(({ date }) => date),\r\n                datasets: [{\r\n                  data: dailyChartData.map((data) => data.confirmed),\r\n                  label: 'Infected',\r\n                  borderColor: '#3333ff',\r\n                  fill: true,\r\n                }, {\r\n                  data: dailyChartData.map((data) => data.deaths),\r\n                  label: 'Deaths',\r\n                  borderColor: 'red',\r\n                  backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                  fill: true,\r\n                },\r\n                ],\r\n              }}\r\n            />\r\n          ) : null\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {(country && country !== 'global') ? barChart: lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport { fetchCountries } from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const countries = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        countries();\r\n    }, [setFetchedCountries]);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect default=\"\" onChange={(e) => {handleCountryChange(e.target.value)}}>\r\n                <option value=\"global\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\n\r\nimport {Cards, Chart, CountryPicker } from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        data: {},\r\n        country: \"\"\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData(); \r\n        this.setState({ data: fetchedData });\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({ data: fetchedData, country: country });\r\n    }\r\n\r\n    render() {\r\n        const { data, country } = this.state;\r\n         \r\n        return (\r\n            <div className={styles.container}>\r\n                <Cards data={data}></Cards>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}></CountryPicker>\r\n                <Chart data={data} country={country}></Chart>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1_m2C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1I9Se\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1KN5o\",\"header\":\"App_header__3ng_E\"};"],"sourceRoot":""}